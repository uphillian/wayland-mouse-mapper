#!/bin/bash

keyboard=$(libinput list-devices | grep keyboard -B4 | grep -E "keyboard $" -B4 | grep -o '/dev/input/event[1-9]*')
keyboard=$(libinput list-devices |grep Keyboard$ -A1 |grep -o '/dev/input/event[1-9]*' |head -1)
event_type=EV_KEY
action_type=POINTER_BUTTON
axis_type=POINTER_AXIS
pressed="pressed,"

readarray -t devices <<<$(libinput list-devices | grep pointer -B4 | grep -o '/dev/input/event[0-9]*')

# COMMANDS MAP
#BTN_EXTRA=(KEY_LEFTMETA KEY_PAGEUP)
#BTN_SIDE=(KEY_LEFTMETA KEY_PAGEDOWN)
LEFT_AXIS=(KEY_LEFTMETA KEY_PAGEUP)
RIGHT_AXIS=(KEY_LEFTMETA KEY_PAGEDOWN)

function pressKey(){
    device=$1; key=$2; value=$3
    echo "pressing ${key} ${value}"
    evemu-event ${keyboard} --sync --type ${event_type} --code ${key} --value ${value};
    echo evemu-event ${keyboard} --sync --type ${event_type} --code ${key} --value ${value};
}

function pressCommand(){
    device=$1; button=$2; movement=$3
    var=$button[@]
    command=${!var}

    if [ ${movement} = ${pressed} ]; then
        for key in ${command}; do
            pressKey ${device} ${key} 1
        done
    else
        for key in ${command}; do
            pressKey ${device} ${key} 0
        done | tac
    fi
}

function parseEventLine(){
    device=$1
    action=$2
    button=$4
    movement=$6
    axis=${7%.*}

    # compute only if right action
    if [ ${action} = ${axis_type} ]; then
        if [ ${axis} -eq -15 ]; then
          button=LEFT_AXIS
        elif [ ${axis} -eq 15 ]; then
          button=RIGHT_AXIS
        fi
        pressCommand ${device} ${button} $pressed
        pressCommand ${device} ${button} 0
        echo axis: pressCommand ${device} ${button} ${movement}
    elif [ ${action} = ${action_type} ]; then
        pressCommand ${device} ${button} ${movement}
        echo pressCommand ${device} ${button} ${movement}
    fi
}

function mapDevice(){
    device=$1
    while read line; do
        parseEventLine ${line}
        echo ${line}
    done < <(stdbuf -oL libinput debug-events --device ${device} & )
}

if [[ ${devices[0]} == '' ]]; then
  echo "No Pointers Found. Try again."
  exit 1
fi

for device in ${devices[@]}; do
    ( mapDevice ${device} ) &
done

wait
